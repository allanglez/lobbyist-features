{#
/**
 * @file
 * Default theme implementation to display a table.
 *
 * Available variables:
 * - attributes: HTML attributes to apply to the <table> tag.
 * - colgroups: Column groups. Each group contains the following properties:
 *   - attributes: HTML attributes to apply to the <col> tag.
 *     Note: Drupal currently supports only one table header row, see
 *     https://drupal.org/node/893530 and
 *     http://api.drupal.org/api/drupal/includes!theme.inc/function/theme_table/7#comment-5109.
 * - header: Table header cells. Each cell contains the following properties:
 *   - tag: The HTML tag name to use; either TH or TD.
 *   - attributes: HTML attributes to apply to the tag.
 *   - content: A localized string for the title of the column.
 *   - field: Field name (required for column sorting).
 *   - sort: Default sort order for this column ("asc" or "desc").
 * - rows: Table rows. Each row contains the following properties:
 *   - attributes: HTML attributes to apply to the <tr> tag.
 *   - data: Table cells.
 *   - cells: Table cells of the row. Each cell contains the following keys:
 *     - tag: The HTML tag name to use; either TH or TD.
 *     - attributes: Any HTML attributes, such as "colspan", to apply to the
 *       table cell.
 *     - content: The string to display in the table cell.
 *     - active_table_sort: A boolean indicating whether the cell is the active
 *       table sort.
 * - footer: Table footer rows, in the same format as the rows variable.
 * - empty: The message to display in an extra row if table does not have
 *   any rows.
 * - header_columns: The number of columns in the header.
 * - bordered: Flag indicating whether or not the table should be bordered.
 * - condensed: Flag indicating whether or not the table should be condensed.
 * - hover: Flag indicating whether or not table rows should be hoverable.
 * - striped: Flag indicating whether or not table rows should be striped.
 * - responsive: Flag indicating whether or not the table should be wrapped to
 *   be responsive (using the Bootstrap Framework .table-responsive wrapper).
 *
 * @ingroup templates
 *
 * @see template_preprocess_custom_table()
 */
#}

{% if responsive %}
  <div class="table-responsive">
{% endif %}
{%
  set classes = [
    'table',
    bordered ? 'table-bordered',
    condensed ? 'table-condensed',
    hover ? 'table-hover',
    striped ? 'table-striped',
    sticky ? 'sticky-enabled',
  ]
%}

<table{{ attributes.addClass(classes) }}>
  {% if caption %}
    <caption>{{ caption }}</caption>
  {% endif %}

  {% for colgroup in colgroups %}
    {% if colgroup.cols %}
      <colgroup{{ colgroup.attributes }}>
        {% for col in colgroup.cols %}
          <col{{ col.attributes }} />
        {% endfor %}
      </colgroup>
    {% else %}
      <colgroup{{ colgroup.attributes }} />
    {% endif %}
  {% endfor %}

  {% if header %}
    <thead>
      <tr>
        {% for cell in header %}
        {%
        set cell_classes = [
          cell.active_table_sort ? 'active',
        ]
        %}
        <{{ cell.tag }}{{ cell.attributes.addClass(cell_classes) }}>
        {{- cell.content -}}
      </{{ cell.tag }}>
      {% endfor %}
      </tr>
    </thead>
  {% endif %}

  {% if rows %}
    <tbody>
      {% for row in rows %}
        {% set row_classes = [cycle(['odd', 'even'], loop.index0)] %}
        <tr{{ row.attributes.addClass(row_classes) }}>
          {% for cell in row.cells %}
            <{{ cell.tag }}{{ cell.attributes }}>
              {{- cell.content -}}
            </{{ cell.tag }}>
          {% endfor %}
        </tr>
      {% endfor %}
    </tbody>
  {% elseif empty %}
    <tbody>
      <tr class="odd">
        <td colspan="{{ header_columns }}" class="empty message">{{ empty }}</td>
      </tr>
    </tbody>
  {% endif %}
  {% if footer %}
    <tfoot>
      {% for row in footer %}
        <tr{{ row.attributes }}>
          {% for cell in row.cells %}
            <{{ cell.tag }}{{ cell.attributes }}>
              {{- cell.content -}}
            </{{ cell.tag }}>
          {% endfor %}
        </tr>
      {% endfor %}
    </tfoot>
  {% endif %}
</table>
{% if responsive %}
  </div>
{% endif %}


{% if attributes.id == 'consultant-activities'%}
    <div class="add-lobb-act-content">
        <a type="button" href="/consultant-account-home/consultant-add-activity" class="btn btn-primary purple-button">{% trans %} Add a lobbying activity {% endtrans %}</a>
    </div>
{% elseif attributes.id  == 'in-house-activities'%}
    <div class="add-lobb-act-content">
        <a type="button" href="/in-house-account-home/in-house-add-activity" class="btn btn-primary purple-button">{% trans %} Add a lobbying activity{% endtrans %}</a>
    </div>
{% elseif attributes.id == 'internal-lobbyist' %}
    <div class="add-lobb-act-content"><a type="button" href="/in-house-account-home/add_new_house_lobbyist" class="btn btn-primary purple-button">{% trans %}Add additional in-house lobbyist to the organization {% endtrans %} </a>
    </div>
{% endif %}

<script>
(function ($, Drupal) {
    var varsToPatch;
	var sid, webformId,flagToModify;

    Drupal.behaviors.myBehavior = {
        attach: function (context, settings) {
            var sort_column = '{{sort_column}}' ? '{{sort_column}}' : 0 ;
            var sort_order = '{{sort_order}}' ? '{{sort_order}}' : 'desc' ;

            $('#{{attributes.id}}', context).once('dataTable')
                .on( 'order.dt',  function () { addEvent2Confirm(context, settings); } )
                .on( 'page.dt',   function () { addEvent2Confirm(context, settings); } )
                .DataTable( {
                    "pagingType": "full_numbers",
                    "searching": false,
                    "order": [[ sort_column, sort_order ]]
                });

            $('#{{attributes.id}}', context).once('dataTable')
                .on( 'order.dt',  function () { addEvent2Confirm(context, settings); } )
                .on( 'page.dt',   function () { addEvent2Confirm(context, settings); } );

        } 
    };
    
    function addEvent2Confirm(context, settings){        
        $('.btn-confirm', context).click(function () {
        		$(".delete-action, .accept-action").on("click", function(e){
        		    varsToPatch = $(this).children("div").attr("data");
        		    [sid, webformId,flagToModify] = varsToPatch.split('&');
        		    $("#confirmModal").modal('show');
        		});
        		$("#modal-btn-yes").on("click", function(){
            		switch(flagToModify){
                		case "Active":
                            patchNode({ "frontend_status": flagToModify, "status": flagToModify, 'user_uid': settings.user.uid });
                		break;
                		default:
                            patchNode({ "deleted": true });
                		break;
            		}
        		});
        		$("#modal-btn-no").on("click", function(){
        		    $("#confirmModal").modal('hide');
        		});
            });        
    }
    function patchNode(data) {
        $.ajax({
            url:    '/patch/' + webformId    + '/' + sid + '/' + JSON.stringify(data),
            method: 'PATCH',
            cors: false,
            headers: {'Content-Type': 'application/json'},
            success: function (data) {
    	        $("#confirmModal").modal('hide');
    	        location.reload(true);
            }
        });
    }
})(jQuery, Drupal);
</script>
