<?php
    
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Database;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\biz_webforms\BizWebformController;
use Drupal\biz_block_plugin\Controller\GeneralFunctions;
use Drupal\Core\Url;
use Drupal\Core\Link;

/****
    * Returns an array of strings using a delimiter ","
    */
function split_by_comma_into_array($string) {
    $array = explode(",", $string);
    $array = array_map('trim', $array);
    return $array;
}

/****
    * Get and group a taxonomy using the parents
    */
function get_group_taxonomy($url){
    $arr_options = array();
    $return_taxo = [];
    $taxo = [];
    $request_options = BizWebformController::get_request_options(TRUE);
    $get_taxo = BizWebformController::execute_external_api($url, [], "GET", $request_options);
    
    if($get_taxo['code'] !== 400) {
        $taxo =json_decode($get_taxo['message']);
    }
    foreach ($taxo as $key => $item) {
        if ($item->parent_target_id) { $arr_options["categories"][] = $item->parent_target_id; }
    }
    foreach($taxo as $key_taxo => $item_taxo) {
        if(in_array($item_taxo->tid, $arr_options["categories"]) && !array_key_exists($item_taxo->name, $return_taxo)) { 
            $name = html_entity_decode($item_taxo->name, ENT_QUOTES, "UTF-8");
            $return_taxo[$item_taxo->name] = array();
            $arr_options["categories"][$item_taxo->tid] = array('name' => $name);                   
        } else {
            if(isset($arr_options["categories"][$item_taxo->parent_target_id]['name'])){
                $key = $arr_options["categories"][$item_taxo->parent_target_id]['name'];
                $return_taxo[$key][$item_taxo->tid] = html_entity_decode($item_taxo->name, ENT_QUOTES, "UTF-8");
            }
        }
    }
    return $return_taxo;
}

/****
    * Implements hook_form_alter().
    *  The actions are change for validate and save the information in another server
    */
function biz_webforms_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
    $base_url = \Drupal::config('biz_lobbyist_registration.settings')->get('base_url');
    $endpoint_port = "portfolio-taxonomy-options/get";
    $endpoint_topic = "api/get-topics";
    $url_taxo = $base_url . $endpoint_port;
    $url_topic = $base_url . $endpoint_topic;
    $data_form_state = $form_state->getValues();
    $request_options = BizWebformController::get_request_options(TRUE);
    switch ($form_id) {
        case "webform_submission_add_new_in_house_lobbyist_node_9_add_form":
            $url = \Drupal::config('biz_lobbyist_registration.settings')->get('base_url') . \Drupal::config('biz_lobbyist_registration.settings')->get('json_path') . \Drupal::currentUser()->getEmail();
            $response = BizWebformController::execute_external_api($url, [], "GET", $request_options);
            $data = json_decode($response["message"])[0];
            $edit_organization = '/user/' . \Drupal::currentUser()->id() . '/edit';
            
            $markup = twig_render_template(drupal_get_path('module', 'biz_block_plugin') . '/templates/organization-info-form-header-action.html.twig',
                array('link_to_action' => $edit_organization));        // Cast to string since twig_render_template returns a Markup object.
            $header_action = (string) $markup;
            $form["elements"]["update_organization_action"]["#text"] = $header_action;            
            
            $markup = twig_render_template(drupal_get_path('module', 'biz_block_plugin') . '/templates/organization-info-form-header.html.twig',
                array('organization' => $data));        // Cast to string since twig_render_template returns a Markup object.
            $header_body = (string) $markup;
            $form["elements"]["organization_header"]["#text"] = $header_body;
            $form['actions']['submit']['#submit'] = ['biz_webforms_post'];
        break;
        case "webform_submission_add_an_in_house_lobbyist_to_your_node_20_add_form":
            $form['actions']['submit']['#submit'] = ['::submitForm', 'biz_webforms_patching'];
        break;
        case "webform_submission_add_a_lobbying_activity_edit_node_32_add_form":
            $form['actions']['submit']['#submit'] = ['::submitForm', 'biz_webforms_patching'];
            $email = \Drupal::currentUser()->getEmail();
            $lobbyist_endpoint = \Drupal::config('biz_block_plugin.settings')->get('in_house_lobbying_list');
            $activities_response = GeneralFunctions::getAllData($lobbyist_endpoint);
            $rows_response = json_decode($activities_response['message']);
            $options = [];
            $return_taxo = get_group_taxonomy($url_taxo);
            $form['elements']['who_are_you_lobbying_or_plan_to_lobby_']['#options'] = $return_taxo;
            
            foreach($rows_response as $id => $user){
                $options [$user->sid] = $user->name ;
            }

            $topics_options = [];
            $get_topics = BizWebformController::execute_external_api($url_topic, [], "GET", $request_options);
            if($get_topics['code'] !== 400) {
                $topics_options =json_decode($get_topics['message'], true);
                $topics_options = array_column($topics_options, 'name', 'tid');
                $form['elements']['which_topic_do_you_want_to_lobby_government_about_']['#options'] = $topics_options;
            }

            if(empty($data_form_state['which_topic_do_you_want_to_lobby_government_about_'])){
              $topics_id = \Drupal::request()->query->get('which_topic_do_you_want_to_lobby_government_about_');
              $form['elements']['which_topic_do_you_want_to_lobby_government_about_']['#default_value'] = split_by_comma_into_array($topics_id);
            } 
            if(empty($data_form_state['who_are_you_lobbying_or_plan_to_lobby_'])){
              $whom_id = \Drupal::request()->query->get('who_are_you_lobbying_or_plan_to_lobby_');
              $form['elements']['who_are_you_lobbying_or_plan_to_lobby_']['#default_value'] = split_by_comma_into_array($whom_id);
            }
            if(empty($data_form_state['how_do_you_want_to_lobby_'])){
              $how_do_you_want_to_lobby_ = \Drupal::request()->query->get('how_do_you_want_to_lobby_');
              $form['elements']['how_do_you_want_to_lobby_']['#default_value'] = split_by_comma_into_array($how_do_you_want_to_lobby_);
            }
            $form['elements']['in_house_lobbyist']['#options'] = $options;
            $form['elements']['status']['#default_value'] = \Drupal::request()->query->get('status');
            $form['actions']["preview_next"]['#validate'][] = 'biz_validate_specifics_fields';
            break;
        //Create a new activity (in-house and consultant)
        case "webform_submission_add_a_lobbying_activity_node_8_add_form":
        case "webform_submission_add_a_lobbying_activity_consulta_node_10_add_form":  

            $topics_options = [];
            $get_topics = BizWebformController::execute_external_api($url_topic, [], "GET", $request_options);
            if($get_topics['code'] !== 400) {
                $topics_options =json_decode($get_topics['message'], true);
                $topics_options = array_column($topics_options, 'name', 'tid');
                $form['elements']['which_topic_do_you_want_to_lobby_government_about_']['#options'] = $topics_options;
            }
            $return_taxo = get_group_taxonomy($url_taxo);
            $form['elements']['who_are_you_lobbying_or_plan_to_lobby_']['#options'] = $return_taxo;
            $form['actions']["preview_next"]['#validate'][] = 'biz_validate_specifics_fields';
            $form['actions']['submit']['#submit'] = ['biz_webforms_post'];
            break;
        case "webform_submission_add_a_lobbying_activity_consedit_node_21_add_form":
            $topics_options = [];
            $get_topics = BizWebformController::execute_external_api($url_topic, [], "GET", $request_options);
            if($get_topics['code'] !== 400) {
                $topics_options =json_decode($get_topics['message'], true);
                $topics_options = array_column($topics_options, 'name', 'tid');
                $form['elements']['which_topic_do_you_want_to_lobby_government_about_']['#options'] = $topics_options;
            }
            $form['actions']['submit']['#submit'] = ['::submitForm', 'biz_webforms_patching'];   
            $return_taxo = get_group_taxonomy($url_taxo);
            $form['elements']['who_are_you_lobbying_or_plan_to_lobby_']['#options'] = $return_taxo;
            if(empty($data_form_state['which_topic_do_you_want_to_lobby_government_about_'])){
              $topics_id = \Drupal::request()->query->get('which_topic_do_you_want_to_lobby_government_about_');
              $form['elements']['which_topic_do_you_want_to_lobby_government_about_']['#default_value'] = split_by_comma_into_array($topics_id);
            } 
            if(empty($data_form_state['who_are_you_lobbying_or_plan_to_lobby_'])){
              $whom_id = \Drupal::request()->query->get('who_are_you_lobbying_or_plan_to_lobby_');
              $form['elements']['who_are_you_lobbying_or_plan_to_lobby_']['#default_value'] = split_by_comma_into_array($whom_id);
            }
            if(empty($data_form_state['how_do_you_want_to_lobby_'])){
              $how_do_you_want_to_lobby_ = \Drupal::request()->query->get('how_do_you_want_to_lobby_');
              $form['elements']['how_do_you_want_to_lobby_']['#default_value'] = split_by_comma_into_array($how_do_you_want_to_lobby_);
            }
            $form['elements']['custom_address']['#default_value']['address_line1'] = \Drupal::request()->query->get('address_line1');
            $form['elements']['custom_address']['#default_value']['locality'] = \Drupal::request()->query->get('locality');
            $form['elements']['custom_address']['#default_value']['postal_code'] = strtoupper(\Drupal::request()->query->get('postal_code'));
            $form['elements']['custom_address']['#default_value']['administrative_area'] = \Drupal::request()->query->get('administrative_area');
            $form['elements']['status']['#default_value'] = \Drupal::request()->query->get('status');
            $form['actions']["preview_next"]['#validate'][] = 'biz_validate_specifics_fields';
            break;
        case "webform_submission_modal_confirmation_add_form":
            $form['actions']['submit']['#submit'] = ['biz_webforms_delete_user_confirmed'];
            break;
        default:
            break;
    }
}

/**
 * Validate if the "Other" option is select if it is, the "Other" text field is required
 */
function biz_validate_specifics_fields($form, &$form_state){
    $values = $form_state->getValues();
    $topics = isset($values['which_topic_do_you_want_to_lobby_government_about_']) ?$values['which_topic_do_you_want_to_lobby_government_about_'] : [];
    if(in_array('181', $topics)){
        if( empty($values['other'] )){
            $form_state->setErrorByName('other', t('The Other field is required'));
        }
    }
}

/****
    * Function send the information to the backend for delete a lobbyist
    *
    */
function biz_webforms_delete_user_confirmed(&$form, FormStateInterface $form_state) {
    $submission_id = \Drupal::request()->query->get('id');
    $webform_id = \Drupal::request()->query->get('webform_id');
    $base_url = \Drupal::config('biz_lobbyist_registration.settings')->get('base_url');
    $url = $base_url . 'webform_rest/' . $webform_id . '/submission/' . $submission_id;
    $data = ['deleted' => true];
    $request_options = BizWebformController::get_request_options(TRUE);
    $delete_lobbyist = BizWebformController::execute_external_api($url, $data, 'PATCH', $request_options);
    if($delete_lobbyist['code'] == 400){
        \Drupal::logger('biz_webforms')->notice(json_encode($delete_lobbyist));
        drupal_set_message(t('The website encountered an unexpected error. Please try again later.'), 'error');
    }
    else{
        drupal_set_message(t('The lobbyist has bee deleted.'), 'status');
    }
    
    BizWebformController::user_redirect(\Drupal::currentUser());  
}

/****
    * Function send the information to the backend for creating a new activity
    *
    */
function biz_webforms_post(&$form, FormStateInterface $form_state){
    $current_user = \Drupal::currentUser();
    $base_url = \Drupal::config('biz_lobbyist_registration.settings')->get('base_url');
    $url = $base_url . 'webform_rest/submit';
    $data = $form_state->getValues();  
    $tab = '';
    //Updated user id 
    $email = $current_user->getEmail();
    $base_url = \Drupal::config('biz_lobbyist_registration.settings')->get('base_url');
    $endpoint = \Drupal::config('biz_lobbyist_registration.settings')->get('json_path');
    $url_user = $base_url .$endpoint . \Drupal::currentUser()->getEmail();

    $request_options = BizWebformController::get_request_options(TRUE);
    $user = BizWebformController::execute_external_api($url_user, [], 'GET', $request_options);
    if($user['code'] == 400){
        \Drupal::logger('biz_webforms')->notice(json_encode($user));
        drupal_set_message(t('The website encountered an unexpected error. Please try again later.'), 'error');
        BizWebformController::user_redirect(\Drupal::currentUser());
    }
    $user = isset(json_decode($user['message'])[0]) ? json_decode($user['message'])[0] : [];
    $data['uid']= $user->uid;
    $data['user_uid']= $user->uid;
    $data['webform_id'] = $form["#webform_id"];
    $post_activity = BizWebformController::execute_external_api($url, $data, 'POST', $request_options);
    if($post_activity['code'] == 400){
        \Drupal::logger('biz_webforms')->notice(json_encode($post_activity));
        drupal_set_message(t('The website encountered an unexpected error. Please try again later.'), 'error');
    }
    else{
        drupal_set_message(t('The information has been saved.'), 'status');
    }
    if($data['webform_id'] == 'add_new_in_house_lobbyist'){
        $tab = '?qt-account_home=1';
    }
    BizWebformController::user_redirect(\Drupal::currentUser(), $tab);
}

/****
    * Function send the information to the backend for update an activity
    */
function biz_webforms_patching(&$form, FormStateInterface &$form_state) {
    $submission_id = \Drupal::request()->query->get('sid');
    $webform_id = \Drupal::request()->query->get('webform_id');
    $data = $form_state->getValues();  
    $tab = '';
    BizWebformController::webforms_patching($webform_id, $submission_id, $data);
    if($webform_id == 'add_an_in_house_lobbyist_to_your'){
        $tab = '?qt-account_home=1';
    }
    BizWebformController::user_redirect(\Drupal::currentUser(),$tab);
}

/****
    * Implements hook_system_breadcrumb_alter().
    */
function biz_webforms_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context){
    $links = $breadcrumb->getLinks();
    $lobbyist_paths = ["/home-search", "/admin-dashboard", "/admin-dashboard/in-house-activity-view", "/admin-dashboard/consultant-activity-view","/in-house-account-home/in-house-add-activity", "/in-house-account-home/add_new_house_lobbyist", "/in-house-account-home", "/consultant-account-home/consultant-activity-view/consultant-add-activity-edit", "/consultant-account-home/consultant-add-activity","/in-house-account-home/in-house-activity-view", "/in-house-in-organization-edit", "/in-house-organization-info", "/in-house-account-home/in-house-activity-view/in-house-add-activity-edit" ];
    $current_alias = \Drupal::service('path.alias_manager')->getAliasByPath(\Drupal::service('path.current')->getPath());

    if(in_array($current_alias, $lobbyist_paths) || strpos($current_alias, "/user/") !== FALSE){
        unset($links[0]);
    }
    foreach ($links as $link) {
        $url = $link->getUrl();
        $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/'.$url->getInternalPath());
        $param = \Drupal::request()->query->all();
        $id_organization = trim(isset($param['org']) ? $param['org'] : ''); 
        switch($alias){
            case '/search-organization/organization-view':
            case '/in-house-account-home/in-house-activity-view':
            case '/consultant-account-home/consultant-activity-view':
                if(!empty($id_organization)){
                    $url->setRouteParameter('id', $id_organization);
                }
            break;
            case strpos($alias, '/user/') !== FALSE:
                $links = [];
                $current_user = \Drupal::currentUser();
                $roles = $current_user->getRoles(); 
                switch(TRUE){
                     case in_array('in_house_lobbyist', $roles): 
                        $path = \Drupal::service('path.alias_manager')->getPathByAlias('/in-house-account-home');
                        if(preg_match('/node\/(\d+)/', $path, $matches)) {
                            $node = \Drupal\node\Entity\Node::load($matches[1]);
                            $nid = $node->id();
                            $links[] = Link::createFromRoute('Account Home','entity.node.canonical', ['node' => $nid]);
                        }
                    break;
                    case in_array('consultant_lobbyist', $roles): 
                        $path = \Drupal::service('path.alias_manager')->getPathByAlias('/consultant-account-home');
                        if(preg_match('/node\/(\d+)/', $path, $matches)) {
                            $node = \Drupal\node\Entity\Node::load($matches[1]);
                            $nid = $node->id();
                            $links[] = Link::createFromRoute('Account Home','entity.node.canonical', ['node' => $nid]);
                        }    
                    break;
                }
            break;
        }
        $url->setAbsolute();
    }
    $cacheability = \Drupal\Core\Cache\CacheableMetadata::createFromObject($breadcrumb);

    if(in_array($current_alias, $lobbyist_paths) || strpos($current_alias, "/user/") !== FALSE){
        $breadcrumb = new \Drupal\Core\Breadcrumb\Breadcrumb();
        $breadcrumb->setLinks($links);
    }
    $breadcrumb->addCacheableDependency($cacheability);
}

/****
    * Update the owner id, before sending to the backend server
    */
function biz_webforms_webform_submission_presave($submission) {
    $email = $submission->getOwner()->getEmail();
    $base_url = \Drupal::config('biz_lobbyist_registration.settings')->get('base_url');
    $enpoint = \Drupal::config('biz_lobbyist_registration.settings')->get('json_path');
    $url = $base_url .$enpoint . \Drupal::currentUser()->getEmail();
    $request_options = BizWebformController::get_request_options(TRUE);
    $user = BizWebformController::execute_external_api($url, [], "GET", $request_options);
    
    if($user['code'] == 400){
        \Drupal::logger('biz_webforms_webform_submission_presave')->error(json_encode($user));
        drupal_set_message(t('The website encountered an unexpected error. Please try again later.'), 'error');
    }
    
    $data = $submission->getData();
    $webform = $submission->getWebform();    
    $user = isset(json_decode($user['message'])[0]) ? json_decode($user['message'])[0] : [];

    if(isset($user) && !empty($user)){
        $submission->setOwnerId($user->uid);
        $data['user_uid'] = $user->uid;
        $submission->setData($data);
    }
    $validate = \Drupal::config('biz_business_rules.settings')->get('wave_for_not_validate');
    if(!$validate){
        switch($webform->id()){
            case 'add_a_lobbying_activity':
                $today = date("Y-m-d"); // Today
                $from = "";
                $to = "";
                $current_month = date('m');
                if ($current_month == '12') {
                  $to = date($nextYear . '-01-31');
                } else if ($current_month >= 1 && $current_month <= 11) {
                  $to = date(date('Y'). '-01-31');
                }
                if($today > $to){
                  $message = \Drupal::config('biz_business_rules.settings')->get('in_house_validate_end_calendar');
                  drupal_set_message(t($message), 'warning');
                }
            break;
            case 'add_a_lobbying_activity_consulta':
                $date_time_today = new DateTime();
                $date_time_start_date = new DateTime($data['start_date']);
                $interval = $date_time_today->diff($date_time_start_date);
                $days = $interval->format('%a');
          
                if($days > 15 && $date_time_today > $date_time_start_date){
                    $message = \Drupal::config('biz_business_rules.settings')->get('consultant_validate_start_date');
                    drupal_set_message(t($message), 'warning');
                }
            break;
        }
    }
}

/****
    * Altering the review from submission, and will display the correct information getting from the backend
    */
function biz_webforms_webform_submission_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
    if($entity->getEntityType()->id() == "webform_submission"){
        $request_options = BizWebformController::get_request_options(FALSE);
        $base_url = \Drupal::config('biz_lobbyist_registration.settings')->get('base_url');
        $data_submission = $entity->getData();
        if(isset( $data_submission["who_are_you_lobbying_or_plan_to_lobby_"])){
          $id_who_are_you_lobbying_or_plan_to_lobby = implode(',', $data_submission["who_are_you_lobbying_or_plan_to_lobby_"]) ;
            $endpoint = "api/portfolio-taxonomy-options/";
            $url_taxo = $base_url . $endpoint. $id_who_are_you_lobbying_or_plan_to_lobby;
            $get_taxo = BizWebformController::execute_external_api($url_taxo, [], "GET", $request_options);
            if($get_taxo['code'] == 400) {
                \Drupal::logger('biz_webforms')->error(json_encode($get_taxo));
                drupal_set_message(t('The website encountered an unexpected error. Please try again later.'), 'error');
                return FALSE;  
            }
            $taxo =json_decode($get_taxo['message']);
            $taxo_values = $build["data"]["who_are_you_lobbying_or_plan_to_lobby_"]["#value"];
            $count = 0;
            foreach($taxo_values as $key => $value){
                if($value["#markup"] !== ", " ){
                    $taxo_values[$key]["#markup"] = $taxo[$count]->name;
                    $count++;
                }
            }
            $build["data"]["who_are_you_lobbying_or_plan_to_lobby_"]["#value"] = $taxo_values;
        }
        if(isset( $data_submission["which_topic_do_you_want_to_lobby_government_about_"])){
            $id_who_are_you_lobbying_or_plan_to_lobby = implode(',', $data_submission["which_topic_do_you_want_to_lobby_government_about_"]) ;
            
            $endpoint = "api/topics-values/";
            $url_taxo = $base_url . $endpoint. $id_who_are_you_lobbying_or_plan_to_lobby;
            
            $get_taxo = BizWebformController::execute_external_api($url_taxo, [], "GET", $request_options);
            
            if($get_taxo['code'] == 400) {
                \Drupal::logger('biz_webforms')->error(json_encode($get_taxo));
                drupal_set_message(t('The website encountered an unexpected error. Please try again later.'), 'error');
                return FALSE;  
            }
            $taxo =json_decode($get_taxo['message']);
            $taxo_values = $build["data"]["which_topic_do_you_want_to_lobby_government_about_"]["#value"];
            $count = 0;
            foreach($taxo_values as $key => $value){
                if($value["#markup"] !== ", " ){
                    if($taxo[$count]->name == 'Other'){
                        $other = isset($build["data"]["other"]["#value"]) && !empty($build["data"]["other"]["#value"]) ? ': '.$build["data"]["other"]["#value"]["#plain_text"]:'';
                        $taxo[$count]->name = $taxo[$count]->name . $other;
                    }
                    $taxo_values[$key]["#markup"] = $taxo[$count]->name;
                    $count++;
                }
            }
            $other = isset($build["data"]["other"]["#value"]) && !empty($build["data"]["other"]["#value"]) ? ': '.$build["data"]["other"]["#value"]:'';
            $build["data"]["which_topic_do_you_want_to_lobby_government_about_"]["#value"] = $taxo_values ;
        }
    }
}

?>